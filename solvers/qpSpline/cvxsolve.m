% Produced by CVXGEN, 2015-04-06 22:08:40 -0400.
% CVXGEN is Copyright (C) 2006-2012 Jacob Mattingley, jem@cvxgen.com.
% The code in this file is Copyright (C) 2006-2012 Jacob Mattingley.
% CVXGEN, or solvers produced by CVXGEN, cannot be used for commercial
% applications without prior written permission from Jacob Mattingley.

% Filename: cvxsolve.m.
% Description: Solution file, via cvx, for use with sample.m.
function [vars, status] = cvxsolve(params, settings)
Q0 = params.Q0;
Q1 = params.Q1;
Q2 = params.Q2;
t0 = params.t0;
t1 = params.t1;
t2 = params.t2;
tf = params.tf;
x0 = params.x0;
x1 = params.x1;
x2 = params.x2;
xd0 = params.xd0;
xdf = params.xdf;
xf = params.xf;
cvx_begin
  % Caution: automatically generated by cvxgen. May be incorrect.
  variable y0_1(2, 1);
  variable y0_2(2, 1);
  variable y0_3(2, 1);
  variable y0_4(2, 1);
  variable y0_5(2, 1);
  variable y0_6(2, 1);
  variable y1_1(2, 1);
  variable y1_2(2, 1);
  variable y1_3(2, 1);
  variable y1_4(2, 1);
  variable y1_5(2, 1);
  variable y1_6(2, 1);
  variable y2_1(2, 1);
  variable y2_2(2, 1);
  variable y2_3(2, 1);
  variable y2_4(2, 1);
  variable y2_5(2, 1);
  variable y2_6(2, 1);
  variable C0_0(6, 1);
  variable C0_1(6, 1);
  variable C1_0(6, 1);
  variable C2_0(6, 1);
  variable C0_2(6, 1);
  variable C0_3(6, 1);
  variable C1_1(6, 1);
  variable C1_2(6, 1);
  variable C1_3(6, 1);
  variable C2_1(6, 1);
  variable C2_2(6, 1);
  variable C2_3(6, 1);

  minimize(quad_form(y0_1, Q0) + quad_form(y0_2, Q0) + quad_form(y0_3, Q0) + quad_form(y0_4, Q0) + quad_form(y0_5, Q0) + quad_form(y0_6, Q0) + quad_form(y1_1, Q1) + quad_form(y1_2, Q1) + quad_form(y1_3, Q1) + quad_form(y1_4, Q1) + quad_form(y1_5, Q1) + quad_form(y1_6, Q1) + quad_form(y2_1, Q2) + quad_form(y2_2, Q2) + quad_form(y2_3, Q2) + quad_form(y2_4, Q2) + quad_form(y2_5, Q2) + quad_form(y2_6, Q2));
  subject to
    C0_0 == x0;
    C0_1 == xd0;
    C1_0 == x1;
    C2_0 == x2;
    C0_0 + (t1 - t0)*C0_1 + (t1 - t0)*(t1 - t0)*C0_2 + (t1 - t0)*(t1 - t0)*(t1 - t0)*C0_3 == C1_0;
    C1_0 + (t2 - t1)*C1_1 + (t2 - t1)*(t2 - t1)*C1_2 + (t2 - t1)*(t2 - t1)*(t2 - t1)*C1_3 == C2_0;
    C2_0 + (tf - t2)*C2_1 + (tf - t2)*(tf - t2)*C2_2 + (tf - t2)*(tf - t2)*(tf - t2)*C2_3 == xf;
    C0_1 + 2*(t1 - t0)*C0_2 + 3*(t1 - t0)*(t1 - t0)*C0_3 == C1_1;
    C1_1 + 2*(t2 - t1)*C1_2 + 3*(t2 - t1)*(t2 - t1)*C1_3 == C2_1;
    C2_1 + 2*(tf - t2)*C2_2 + 3*(tf - t2)*(tf - t2)*C2_3 == xdf;
    2*C0_2 + 6*(t1 - t0)*C0_3 == 2*C1_2;
    2*C1_2 + 6*(t2 - t1)*C1_3 == 2*C2_2;
    y0_1(1) == C0_2(1);
    y0_2(1) == C0_2(2);
    y0_3(1) == C0_2(3);
    y0_4(1) == C0_2(4);
    y0_5(1) == C0_2(5);
    y0_6(1) == C0_2(6);
    y0_1(2) == C0_3(1);
    y0_2(2) == C0_3(2);
    y0_3(2) == C0_3(3);
    y0_4(2) == C0_3(4);
    y0_5(2) == C0_3(5);
    y0_6(2) == C0_3(6);
    y1_1(1) == C1_2(1);
    y1_2(1) == C1_2(2);
    y1_3(1) == C1_2(3);
    y1_4(1) == C1_2(4);
    y1_5(1) == C1_2(5);
    y1_6(1) == C1_2(6);
    y1_1(2) == C1_3(1);
    y1_2(2) == C1_3(2);
    y1_3(2) == C1_3(3);
    y1_4(2) == C1_3(4);
    y1_5(2) == C1_3(5);
    y1_6(2) == C1_3(6);
    y2_1(1) == C2_2(1);
    y2_2(1) == C2_2(2);
    y2_3(1) == C2_2(3);
    y2_4(1) == C2_2(4);
    y2_5(1) == C2_2(5);
    y2_6(1) == C2_2(6);
    y2_1(2) == C2_3(1);
    y2_2(2) == C2_3(2);
    y2_3(2) == C2_3(3);
    y2_4(2) == C2_3(4);
    y2_5(2) == C2_3(5);
    y2_6(2) == C2_3(6);
cvx_end
vars.C0_0 = C0_0;
vars.C0_1 = C0_1;
vars.C0{1} = C0_1;
vars.C0_2 = C0_2;
vars.C0{2} = C0_2;
vars.C0_3 = C0_3;
vars.C0{3} = C0_3;
vars.C1_0 = C1_0;
vars.C1_1 = C1_1;
vars.C1{1} = C1_1;
vars.C1_2 = C1_2;
vars.C1{2} = C1_2;
vars.C1_3 = C1_3;
vars.C1{3} = C1_3;
vars.C2_0 = C2_0;
vars.C2_1 = C2_1;
vars.C2{1} = C2_1;
vars.C2_2 = C2_2;
vars.C2{2} = C2_2;
vars.C2_3 = C2_3;
vars.C2{3} = C2_3;
vars.y0_1 = y0_1;
vars.y0{1} = y0_1;
vars.y0_2 = y0_2;
vars.y0{2} = y0_2;
vars.y0_3 = y0_3;
vars.y0{3} = y0_3;
vars.y0_4 = y0_4;
vars.y0{4} = y0_4;
vars.y0_5 = y0_5;
vars.y0{5} = y0_5;
vars.y0_6 = y0_6;
vars.y0{6} = y0_6;
vars.y1_1 = y1_1;
vars.y1{1} = y1_1;
vars.y1_2 = y1_2;
vars.y1{2} = y1_2;
vars.y1_3 = y1_3;
vars.y1{3} = y1_3;
vars.y1_4 = y1_4;
vars.y1{4} = y1_4;
vars.y1_5 = y1_5;
vars.y1{5} = y1_5;
vars.y1_6 = y1_6;
vars.y1{6} = y1_6;
vars.y2_1 = y2_1;
vars.y2{1} = y2_1;
vars.y2_2 = y2_2;
vars.y2{2} = y2_2;
vars.y2_3 = y2_3;
vars.y2{3} = y2_3;
vars.y2_4 = y2_4;
vars.y2{4} = y2_4;
vars.y2_5 = y2_5;
vars.y2{5} = y2_5;
vars.y2_6 = y2_6;
vars.y2{6} = y2_6;
status.cvx_status = cvx_status;
% Provide a drop-in replacement for csolve.
status.optval = cvx_optval;
status.converged = strcmp(cvx_status, 'Solved');
